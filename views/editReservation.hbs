<!-- View Reservations Section -->
<div class="container mt-5">
    <h2 class="text-center mb-4">Edit Reservations</h2>
    <div id="reservation-list" class="list-group">
        {{#if reservations.length}}
            {{#each reservations}}
                <div class="list-group-item d-flex justify-content-between align-items-center">
                    <div>
                        {{#if ../isAdmin}}
                            <strong>Name:</strong> {{name}} |
                            <strong>Email:</strong> {{email}} <br>
                        {{/if}}
                        <strong>Room:</strong> {{reservation.room}} |
                        <strong>Day:</strong> {{reservation.day}} |
                        <strong>Time:</strong> {{reservation.startTime}} - {{reservation.endTime}} |
                        <strong>Seat:</strong> <span class="seat-num">{{reservation.seat}}</span>
                    </div>
                    <button class="btn btn-warning btn-sm edit-btn" data-stu-idx="{{userIndex}}" data-idx="{{reservationIndex}}">Edit</button>
                </div>
            {{/each}}
        {{else}}
            <div class="list-group-item">No reservations found.</div>
        {{/if}}
    </div>
</div>

<!-- Edit Reservation Modal -->
<div class="modal fade" id="editReservationModal" tabindex="-1" aria-labelledby="editReservationLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editReservationLabel">Edit Reservation</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="edit-reservation-form">
                    <div class="mb-3">
                        <label for="edit-room" class="form-label">Room</label>
                        <select class="form-select" id="edit-room"></select>
                    </div>
                    <div class="mb-3">
                        <label for="edit-day" class="form-label">Day</label>
                        <select class="form-select" id="edit-day"></select>
                    </div>
                    <div class="mb-3">
                        <label for="edit-time" class="form-label">Time</label>
                        <select class="form-select" id="edit-time"></select>
                    </div>
                    <div class="mb-3">
                        <label for="edit-seat" class="form-label">Seat</label>
                        <select class="form-select" id="edit-seat"></select>
                    </div>
                    <button type="submit" class="btn btn-success">Save Changes</button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-danger" id="delete-reservation-btn">Delete Reservation</button>
                </form>
            </div>
        </div>
    </div>
</div>

<script>
$(document).ready(function() {
    let user = {{{json currentUser}}};
    let students = {{{json students}}}
    let laboratories = {{{json labs}}};
    let editIdx = null;
    let editStu = user;


    $("#reservation-list").on("click", ".edit-btn", function() {
        let stuIdx = $(this).data("stu-idx");
        editIdx = $(this).data("idx");

        if (user.role === "admin" && stuIdx !== "self") {
            editStu = students[stuIdx];
        } else {
            editStu = user;
        }
        let res = editStu.reservations[editIdx];

        // Populate rooms
        let roomSelect = $("#edit-room").empty();
        laboratories.forEach(lab => {
            roomSelect.append(`<option value="${lab.room}">${lab.room}</option>`);
        });
        roomSelect.val(res.room);

        populateDays(res.room, res.day);
        populateTimes(res.room, res.day, res.startTime, res.endTime);
        populateSeats(res.room, res.day, res.startTime, res.endTime, res.seat);

        $("#editReservationModal").modal("show");
    });

    // When room changes, update days
    $("#edit-room").on("change", function() {
        let room = $(this).val();
        populateDays(room);
        $("#edit-time").empty();
        $("#edit-seat").empty();
    });

    // When day changes, update times
    $("#edit-day").on("change", function() {
        let room = $("#edit-room").val();
        let day = $(this).val();
        populateTimes(room, day);
        $("#edit-seat").empty();
    });

    // When time changes, update seats
    $("#edit-time").on("change", function() {
        let room = $("#edit-room").val();
        let day = $("#edit-day").val();
        let [startTime, endTime] = $("#edit-time").val().split(" - ");
        populateSeats(room, day, startTime, endTime);
    });

    // Save changes
    $("#edit-reservation-form").on("submit", function (e) {
        e.preventDefault();

        const [startTime, endTime] = $("#edit-time").val().split(" - ");
        const payload = {
            email: editStu.email,
            oldReservation: editStu.reservations[editIdx],
            updatedReservation: {
            room: $("#edit-room").val(),
            day: $("#edit-day").val(),
            startTime,
            endTime,
            seat: $("#edit-seat").val()
            }
        };

        $.ajax({
            type: "POST",
            url: "/reservation/update",
            data: JSON.stringify(payload),
            contentType: "application/json",
            success: function () {
            alert("Reservation updated!");
            $("#editReservationModal").modal("hide");
            location.reload();
            },
            error: function (err) {
            console.error(err);
            alert("Failed to update reservation.");
            }
        });
    });

    $("#delete-reservation-btn").on("click", function () {
        if (editIdx === null) return;
        if (!confirm("Are you sure you want to delete this reservation?")) return;

        const payload = {
            email: editStu.email,
            reservation: editStu.reservations[editIdx]
        };

        $.ajax({
            type: "POST",
            url: "/reservation/delete",
            data: JSON.stringify(payload),
            contentType: "application/json",
            success: function () {
            alert("Reservation deleted!");
            $("#editReservationModal").modal("hide");
            location.reload(); // optional: you can refresh the UI another way
            },
            error: function (err) {
            console.error(err);
            alert("Failed to delete reservation.");
            }
        });
    });

    // Populate days
    function populateDays(room, selectedDay) {
        let daySelect = $("#edit-day").empty();
        let lab = laboratories.find(l => l.room === room);
        if (!lab) return;
        let days = [...new Set(lab.timeslots.map(s => s.day))];
        days.forEach(day => {
            daySelect.append(`<option value="${day}">${day}</option>`);
        });
        if (selectedDay) daySelect.val(selectedDay);
        else daySelect.prop('selectedIndex', 0);

        daySelect.trigger("change");
    }

    //Populate times
    function populateTimes(room, day, selectedStart, selectedEnd) {
        let timeSelect = $("#edit-time").empty();
        let lab = laboratories.find(l => l.room === room);
        if (!lab) return;
        let slots = lab.timeslots.filter(s => s.day === day);
        slots.forEach(slot => {
            let val = `${slot.startTime} - ${slot.endTime}`;
            timeSelect.append(`<option value="${val}">${val}</option>`);
        });
        if (selectedStart && selectedEnd) timeSelect.val(`${selectedStart} - ${selectedEnd}`);
        else timeSelect.prop('selectedIndex', 0);

        timeSelect.trigger("change");
    }

    function populateSeats(room, day, startTime, endTime, selectedSeat) {
        let seatSelect = $("#edit-seat").empty();
        let lab = laboratories.find(l => l.room === room);
        if (!lab) return;
        let slot = lab.timeslots.find(s =>
            s.day === day &&
            s.startTime === startTime &&
            s.endTime === endTime
        );
        if (!slot) return;
        Object.entries(slot.seats).forEach(([seat, available]) => {
            seatSelect.append(`<option value="${seat}" ${!available && seat !== selectedSeat ? "disabled" : ""}>${seat}${!available && seat !== selectedSeat ? " (Reserved)" : ""}</option>`);
        });
        if (selectedSeat) seatSelect.val(selectedSeat);
        else seatSelect.prop('selectedIndex', 0);
    }
});
</script>
